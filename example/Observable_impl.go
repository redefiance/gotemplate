// +gotemplate ignore
// This file is auto-generated by the gotemplate tool. Manual changes will be overridden.

package example

import (
  "sync"
)

type Observable_God struct {
	mutex		sync.RWMutex
	value		God
	observers	map[*Observer_God]struct{}
}

func (o *Observable_God) Set(value God) {
	o.mutex.Lock()
	o.value = value
	o.mutex.Unlock()
	o.mutex.RLock()
	for obs, _ := range o.observers {
		go obs.Notify(value)
	}
	o.mutex.RUnlock()
}

func (o *Observable_God) Value() God {
	o.mutex.RLock()
	v := o.value
	o.mutex.RUnlock()
	return v
}

func (o *Observable_God) Observe(callback func(God)) *Observer_God {
	o.mutex.Lock()
	obs := &Observer_God{callback, o}
	o.observers[obs] = struct{}{}
	o.mutex.Unlock()
	return obs
}

func newObservable_God(value God) *Observable_God {
	return &Observable_God{value: value, observers: make(map[*Observer_God]struct{})}
}

type Observer_God struct {
	Notify		func(God)
	observable	*Observable_God
}

func (o *Observer_God) Close() {
	o.observable.mutex.Lock()
	delete(o.observable.observers, o)
	o.observable.mutex.Unlock()
}

